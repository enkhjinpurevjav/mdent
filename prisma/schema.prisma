generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Branch {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  address   String?
  phone     String?

  users      User[]
  patients   Patient[]
  rooms      Room[]
  appointments Appointment[]      // NEW
  encounters   Encounter[]        // NEW
  media        Media[]            // NEW
  invoices     Invoice[]          // NEW

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  name      String?
  role      Role       @default(STAFF)
  branchId  String?
  branch    Branch?    @relation(fields: [branchId], references: [id])
  appointments Appointment[] @relation("DoctorAppointments")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum Role {
  ADMIN
  DOCTOR
  NURSE
  FRONTDESK
  STAFF
}

model Patient {
  // ...existing fields...
  encounters   Encounter[]
  appointments Appointment[]
  media        Media[]
  invoices     Invoice[]          // NEW
  // ...timestamps...
}


model Room {
  id        String   @id @default(cuid())
  branchId  String
  branch    Branch   @relation(fields: [branchId], references: [id])
  name      String

  encounters Encounter[]          // NEW

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Appointment {
  id         String   @id @default(cuid())
  patientId  String?
  patient    Patient? @relation(fields: [patientId], references: [id])
  doctorId   String?
  doctor     User?    @relation("DoctorAppointments", fields: [doctorId], references: [id])
  branchId   String
  branch     Branch   @relation(fields: [branchId], references: [id])
  roomId     String?
  room       Room?    @relation(fields: [roomId], references: [id])
  startAt    DateTime
  endAt      DateTime
  status     ApptStatus @default(SCHEDULED)
  reason     String?
  source     ApptSource @default(WEB)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([branchId, doctorId, startAt])
}

enum ApptStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum ApptSource {
  WEB
  CALL
  WALKIN
}

model Encounter {
  // ...existing fields...
  roomId    String?
  room      Room?     @relation(fields: [roomId], references: [id])

  media     Media[]               // NEW
  invoices  Invoice[]             // NEW

  @@index([branchId, doctorId, startedAt])
}


model Media {
  id            String   @id @default(cuid())
  patientId     String
  patient       Patient  @relation(fields: [patientId], references: [id])
  encounterId   String?
  encounter     Encounter? @relation(fields: [encounterId], references: [id])
  kind          MediaKind
  toothCode     String?
  title         String?
  url           String
  meta          Json?
  branchId      String
  branch        Branch   @relation(fields: [branchId], references: [id])
  createdAt     DateTime @default(now())
}

enum MediaKind {
  ORAL_PHOTO
  XRAY
  DOCUMENT
}

model Invoice {
  id          String   @id @default(cuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])
  encounterId String?
  encounter   Encounter? @relation(fields: [encounterId], references: [id])
  branchId    String
  branch      Branch   @relation(fields: [branchId], references: [id])
  number      String   @unique
  currency    String   @default("MNT")
  subtotal    Decimal  @db.Decimal(12,2)
  discount    Decimal  @db.Decimal(12,2) @default(0)
  tax         Decimal  @db.Decimal(12,2) @default(0)
  total       Decimal  @db.Decimal(12,2)
  status      InvoiceStatus @default(UNPAID)
  items       InvoiceItem[]
  payments    Payment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([branchId, createdAt])
}

model InvoiceItem {
  id         String   @id @default(cuid())
  invoiceId  String
  invoice    Invoice  @relation(fields: [invoiceId], references: [id])
  code       String?
  name       String
  qty        Decimal  @db.Decimal(10,2) @default(1)
  unitPrice  Decimal  @db.Decimal(12,2)
  total      Decimal  @db.Decimal(12,2)
}

enum InvoiceStatus {
  UNPAID
  PARTIAL
  PAID
  CANCELLED
}

model Payment {
  id        String   @id @default(cuid())
  invoiceId String
  invoice   Invoice  @relation(fields: [invoiceId], references: [id])
  method    PayMethod
  amount    Decimal  @db.Decimal(12,2)
  currency  String   @default("MNT")
  status    PayStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PayMethod {
  QPAY
  CASH
  CARD
  BANK
}

enum PayStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}
